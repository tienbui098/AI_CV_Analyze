// <auto-generated />
using System;
using AI_CV_Analyze.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI_CV_Analyze.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250729043443_FixNullableProperties")]
    partial class FixNullableProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AI_CV_Analyze.Models.JobCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.JobCategoryRecommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecommendationId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("RelevanceScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("RecommendationId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResumeId");

                    b.ToTable("JobCategoryRecommendations", t =>
                        {
                            t.HasCheckConstraint("CK_JobCategoryRecommendations_RelevanceScore", "RelevanceScore BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeId"));

                    b.Property<string>("AnalysisStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("Resumes", t =>
                        {
                            t.HasCheckConstraint("CK_Resumes_AnalysisStatus", "AnalysisStatus IN ('Pending', 'Processing', 'Completed', 'Failed')");

                            t.HasCheckConstraint("CK_Resumes_FileType", "FileType IN ('PDF', 'JPG', 'PNG')");
                        });
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeAnalysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalysisId"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExperienceScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("FormatScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("KeywordScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("LayoutScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SkillScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Suggestions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnalysisId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeAnalysis", t =>
                        {
                            t.HasCheckConstraint("CK_ResumeAnalysis_Score", "Score BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeAnalysisResult", b =>
                {
                    b.Property<int>("AnalysisResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalysisResultId"));

                    b.Property<string>("Achievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnalysisStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidenceScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetectedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAnalysis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageProficiency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallAnalysis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SentimentScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsAnalysis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnalysisResultId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeAnalysisResults");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeData", b =>
                {
                    b.Property<int>("ResumeDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeDataId"));

                    b.Property<string>("ExtractedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ResumeDataId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeData");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeHistory");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.JobCategoryRecommendation", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.JobCategory", "JobCategory")
                        .WithMany("JobCategoryRecommendations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_CV_Analyze.Models.Resume", "Resume")
                        .WithMany("JobCategoryRecommendations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.Resume", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.User", "User")
                        .WithMany("Resumes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeAnalysis", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.Resume", "Resume")
                        .WithOne("ResumeAnalysis")
                        .HasForeignKey("AI_CV_Analyze.Models.ResumeAnalysis", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeAnalysisResult", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.Resume", "Resume")
                        .WithOne("ResumeAnalysisResult")
                        .HasForeignKey("AI_CV_Analyze.Models.ResumeAnalysisResult", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeData", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.Resume", "Resume")
                        .WithOne("ResumeData")
                        .HasForeignKey("AI_CV_Analyze.Models.ResumeData", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.ResumeHistory", b =>
                {
                    b.HasOne("AI_CV_Analyze.Models.Resume", "Resume")
                        .WithMany("ResumeHistories")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.JobCategory", b =>
                {
                    b.Navigation("JobCategoryRecommendations");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.Resume", b =>
                {
                    b.Navigation("JobCategoryRecommendations");

                    b.Navigation("ResumeAnalysis")
                        .IsRequired();

                    b.Navigation("ResumeAnalysisResult")
                        .IsRequired();

                    b.Navigation("ResumeData")
                        .IsRequired();

                    b.Navigation("ResumeHistories");
                });

            modelBuilder.Entity("AI_CV_Analyze.Models.User", b =>
                {
                    b.Navigation("Resumes");
                });
#pragma warning restore 612, 618
        }
    }
}
