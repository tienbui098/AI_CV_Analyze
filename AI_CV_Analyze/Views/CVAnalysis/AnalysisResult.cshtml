@model AI_CV_Analyze.Models.ResumeAnalysisResult

@{
    ViewData["Title"] = "Kết Quả Phân Tích CV";
    Layout = "~/Views/Shared/_LayoutAnalysisResult.cshtml";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb và navigation -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <div class="flex gap-3">
            <a asp-controller="CVAnalysis" asp-action="JobPrediction" class="btn-secondary flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition">
                <i class="fas fa-arrow-left mr-2"></i> Job suggestions
            </a>
            <button id="btnBackEditSuggestions" type="button" class="btn-secondary flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition">
                <i class="fas fa-edit mr-2"></i> Edit suggestions
            </button>
        </div>
    </div>

    <!-- Header Section -->
    <div class="text-center mb-8">
        <div class="inline-flex items-center justify-center bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-2 rounded-full mb-4 shadow-md">
            <i class="fas fa-check-circle mr-2"></i>
            <span>Analysis complete</span>
        </div>
        <h1 class="text-3xl font-bold text-gray-900 mb-2">CV Analysis Results</h1>
        <p class="text-lg text-gray-600 max-w-3xl mx-auto">The AI system has analyzed your CV and provided detailed evaluations</p>

        <!-- File info cards -->
        <div class="flex flex-wrap justify-center gap-3 mt-6">
            <div class="bg-white px-4 py-2 rounded-lg shadow-sm border border-gray-100 flex items-center">
                <i class="fas fa-file-alt text-blue-500 mr-2"></i>
                <span class="text-sm font-medium text-gray-700 truncate max-w-xs">@Model.FileName</span>
            </div>
            <div class="bg-white px-4 py-2 rounded-lg shadow-sm border border-gray-100 flex items-center">
                <i class="fas fa-calendar-alt text-blue-500 mr-2"></i>
                <span class="text-sm font-medium text-gray-700">@Model.AnalysisDate.ToString("dd/MM/yyyy HH:mm")</span>
            </div>
            <div class="bg-white px-4 py-2 rounded-lg shadow-sm border border-gray-100 flex items-center">
                <i class="fas fa-robot text-blue-500 mr-2"></i>
                <span class="text-sm font-medium text-gray-700">AI Engine 2.0</span>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-6">
            <!-- Overall Analysis -->
            @if (!string.IsNullOrEmpty(Model.OverallAnalysis))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-chart-pie text-blue-500 mr-3"></i> Profile Overview
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="prose max-w-none text-gray-700">
                            @Html.Raw(Model.OverallAnalysis.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }

            <!-- Name Section -->
            @if (!string.IsNullOrEmpty(Model.Name))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-user text-blue-500 mr-3"></i> Name
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="flex flex-wrap gap-3">
                            @foreach (var skill in Model.Name.Split(',').Where(s => !string.IsNullOrWhiteSpace(s)))
                            {
                                <span class="skill-tag bg-blue-50 text-blue-700 px-4 py-2 rounded-full text-sm font-medium border border-blue-100 hover:bg-blue-100 transition">
                                    @skill.Trim()
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Email Section -->
            @if (!string.IsNullOrEmpty(Model.Email))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-envelope text-blue-500 mr-3"></i> Email
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="flex flex-wrap gap-3">
                            @foreach (var skill in Model.Email.Split(',').Where(s => !string.IsNullOrWhiteSpace(s)))
                            {
                                <span class="skill-tag bg-blue-50 text-blue-700 px-4 py-2 rounded-full text-sm font-medium border border-blue-100 hover:bg-blue-100 transition">
                                    @skill.Trim()
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Skills Section -->
            @if (!string.IsNullOrEmpty(Model.Skills))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-tools text-blue-500 mr-3"></i> Skill
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="flex flex-wrap gap-3">
                            @foreach (var skill in Model.Skills.Split(',').Where(s => !string.IsNullOrWhiteSpace(s)))
                            {
                                <span class="skill-tag bg-blue-50 text-blue-700 px-4 py-2 rounded-full text-sm font-medium border border-blue-100 hover:bg-blue-100 transition">
                                    @skill.Trim()
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Education Section -->
            @if (!string.IsNullOrEmpty(Model.Education))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-graduation-cap text-blue-500 mr-3"></i> Education
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="space-y-4">
                            @foreach (var edu in Model.Education.Split(new[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries))
                            {
                                <div class="timeline-item pl-6 relative">
                                    <div class="absolute left-0 top-2 w-3 h-3 rounded-full bg-blue-500 border-4 border-blue-100"></div>
                                    <div class="text-gray-700 bg-gray-50 p-4 rounded-lg border border-gray-100">
                                        @edu
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Experience Section -->
            @if (!string.IsNullOrEmpty(Model.Experience))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-briefcase text-blue-500 mr-3"></i> Experience
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="space-y-4">
                            @foreach (var exp in Model.Experience.Split(new[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries))
                            {
                                <div class="timeline-item pl-6 relative">
                                    <div class="absolute left-0 top-2 w-3 h-3 rounded-full bg-blue-500 border-4 border-blue-100"></div>
                                    <div class="text-gray-700 bg-gray-50 p-4 rounded-lg border border-gray-100">
                                        @exp
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Projects Section -->
            @if (!string.IsNullOrEmpty(Model.FormFields))
            {
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-project-diagram text-blue-500 mr-3"></i> Dự án tiêu biểu
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="prose max-w-none text-gray-700">
                            @Html.Raw(Model.FormFields.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Right Sidebar - Sticky -->
        <div class="lg:col-span-1">
            <div class="sticky-sidebar space-y-6">
                <!-- AI Suggestions -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-robot text-blue-500 mr-3"></i> AI Recommendation
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg mb-6">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-lightbulb text-yellow-500 mt-1"></i>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-yellow-800">Click to view detailed edit suggestions from AI</h3>
                                </div>
                            </div>
                        </div>

                        <form asp-action="GetEditSuggestions" method="post" id="editSuggestionsForm" class="space-y-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="Content" value="@(Model.Content ?? (ViewBag.CVContent ?? ""))" />
                            <button type="submit" class="w-full flex justify-center items-center px-4 py-3 border border-transparent rounded-xl shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition">
                                <i class="fas fa-magic mr-2"></i> CV Edit Suggestions
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Job Recommendations -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-gray-100">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-briefcase text-blue-500 mr-3"></i>Suitable Jobs
                        </h2>
                    </div>
                    <div class="p-6">
                        <div class="text-center py-6">
                            <div id="jobRecommendResult" class="mb-4">
                                @{
                                    var jobRecs = ViewBag.JobRecommendations as Dictionary<string, double>;
                                }
                                @if (jobRecs != null && jobRecs.Any())
                                {
                                    <div class="space-y-4">
                                        <p class="text-sm text-gray-600 mb-4">Based on your skills and experience, we recommend the following positions:</p>
                                        @foreach (var job in jobRecs.OrderByDescending(x => x.Value).Take(3))
                                        {
                                            var percent = (job.Value * 100).ToString("F1");
                                            <div class="job-card p-4 rounded-lg border border-gray-100 hover:border-blue-200 hover:shadow-md transition">
                                                <div class="flex items-start">
                                                    <div class="flex-grow">
                                                        <h3 class="font-bold text-gray-900">@job.Key</h3>
                                                        <div class="flex items-center mt-2">
                                                            <div class="w-full bg-gray-200 rounded-full h-2 mr-3">
                                                                <div class="bg-green-500 h-2 rounded-full" style="width: @percent%"></div>
                                                            </div>
                                                            <span class="text-xs text-gray-600">@percent%</span>
                                                        </div>
                                                    </div>
                                                    <div class="ml-4">
                                                        <div class="circular-chart w-12 h-12">
                                                            <svg viewBox="0 0 36 36">
                                                                <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                                <path class="circle" stroke="#10b981" stroke-dasharray="@percent, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                                <text x="18" y="20.35" class="percentage">@((int)(job.Value * 100))%</text>
                                                            </svg>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <a href="/CVAnalysis/JobPrediction" class="mt-6 w-full flex justify-center items-center px-4 py-3 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition"><i class="fas fa-search mr-2"></i>View more jobs</a>
                                }
                            </div>
                            <button id="btnJobRecommend" type="button" class="btn-primary px-6 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition font-semibold shadow">
                                Job Recommend
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="mt-8 flex flex-col sm:flex-row justify-center gap-4">
        <a asp-action="Index" class="w-full sm:w-auto flex justify-center items-center px-6 py-3 border border-transparent rounded-xl shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition">
            <i class="fas fa-redo mr-2"></i> Analyze another CV
        </a>
        <button id="shareResultBtn" class="w-full sm:w-auto flex justify-center items-center px-6 py-3 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition">
            <i class="fas fa-share-alt mr-2"></i> Share your results
        </button>
    </div>
</div>

<!-- Loading Modal -->
<div id="loadingModal" class="fixed inset-0 z-50 flex items-center justify-center bg-opacity-40 hidden">
    <div class="bg-white rounded-xl shadow-lg p-8 flex flex-col items-center animate__animated animate__fadeInDown w-80">
        <div id="loadingSpinner" class="mb-4">
            <svg class="animate-spin h-10 w-10 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
            </svg>
        </div>
        <div id="loadingText" class="font-semibold text-lg text-center">
            The AI system is processing and generating edit suggestions. Please wait a moment...
        </div>
        <div class="mt-4">
            <button type="button" id="cancelAnalyzeBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition">Cancel</button>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div id="shareModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
    <div class="bg-white rounded-2xl shadow-xl p-6 max-w-md w-full mx-4">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-bold text-gray-900">Share your results</h3>
            <button id="closeShareModal" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="space-y-4">
            <div>
                <label for="shareLink" class="block text-sm font-medium text-gray-700 mb-1">Link</label>
                <div class="flex">
                    <input type="text" id="shareLink" readonly value="@Context.Request.Scheme://@Context.Request.Host@Context.Request.Path" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <button id="copyShareLink" class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-lg bg-gray-50 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
                        <i class="fas fa-copy mr-1"></i>Copy
                    </button>
                </div>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Share via</label>
                <div class="flex space-x-3">
                    <a href="#" class="w-10 h-10 rounded-full bg-blue-600 text-white flex items-center justify-center hover:bg-blue-700 transition">
                        <i class="fab fa-facebook-f"></i>
                    </a>
                    <a href="#" class="w-10 h-10 rounded-full bg-blue-400 text-white flex items-center justify-center hover:bg-blue-500 transition">
                        <i class="fab fa-linkedin-in"></i>
                    </a>
                    <a href="#" class="w-10 h-10 rounded-full bg-red-600 text-white flex items-center justify-center hover:bg-red-700 transition">
                        <i class="fab fa-google"></i>
                    </a>
                    <a href="#" class="w-10 h-10 rounded-full bg-gray-800 text-white flex items-center justify-center hover:bg-gray-900 transition">
                        <i class="fab fa-github"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.getElementById('btnBackEditSuggestions').addEventListener('click', function() {
        fetch('@Url.Action("HasEditSuggestions", "CVAnalysis")', { method: 'GET' })
            .then(res => res.json())
            .then(data => {
                if (data.hasSuggestions) {
                    window.location.href = '@Url.Action("EditSuggestions", "CVAnalysis")';
                } else {
                    alert('Bạn chưa dùng chức năng đề xuất chỉnh sửa CV!');
                }
            });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const btn = document.getElementById('btnJobRecommend');
        if (btn) {
            btn.addEventListener('click', function () {
                btn.disabled = true;
                btn.textContent = 'Loading...';
                const skills = `@Model.Skills`;
                fetch('/CVAnalysis/RecommendJobs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name=__RequestVerificationToken]')?.value || ''
                    },
                    body: JSON.stringify({ skills })
                })
                .then(response => response.json())
                .then(data => {
                    let html = '';
                    // Convert dictionary to array if needed
                    let jobs = [];
                    if (data && !Array.isArray(data)) {
                        jobs = Object.entries(data).map(([title, score]) => ({ title, score }));
                    } else if (Array.isArray(data)) {
                        jobs = data;
                    }
                    if (jobs.length > 0) {
                        // Sort by score descending
                        jobs.sort((a, b) => b.score - a.score);
                        html = '<div class="space-y-4">';
                        html += '<p class="text-sm text-gray-600 mb-4">Based on your skills and experience, we recommend the following positions:</p>';
                        jobs.slice(0, 3).forEach(job => {
                            const percent = (job.score * 100).toFixed(1);
                            html += `
                                <div class="job-card p-4 rounded-lg border border-gray-100 hover:border-blue-200 hover:shadow-md transition">
                                    <div class="flex items-start">
                                        <div class="flex-grow">
                                            <h3 class="font-bold text-gray-900">${job.title}</h3>
                                            <div class="flex items-center mt-2">
                                                <div class="w-full bg-gray-200 rounded-full h-2 mr-3">
                                                    <div class="bg-green-500 h-2 rounded-full" style="width: ${percent}%"></div>
                                                </div>
                                                <span class="text-xs text-gray-600">${percent}%</span>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <div class="circular-chart w-12 h-12">
                                                <svg viewBox="0 0 36 36">
                                                    <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                    <path class="circle" stroke="#10b981" stroke-dasharray="${percent}, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                    <text x="18" y="20.35" class="percentage">${parseInt(percent)}%</text>
                                                </svg>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                        html += `<a href="/CVAnalysis/JobPrediction" class="mt-6 w-full flex justify-center items-center px-4 py-3 border border-gray-300 rounded-xl shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition"><i class=\"fas fa-search mr-2\"></i>View more jobs</a>`;
                    } else {
                        html = '<div class="text-gray-500">No recommendations found.</div>';
                    }
                    document.getElementById('jobRecommendResult').innerHTML = html;
                })
                .catch(() => {
                    document.getElementById('jobRecommendResult').innerHTML = '<div class="text-red-500">Error fetching recommendations.</div>';
                })
                .finally(() => {
                    btn.disabled = false;
                    btn.textContent = 'Job Recommend';
                });
            });
        }
    });
</script>
}